class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        //滑动窗口
        int result = INT_MAX;
        int sum  = 0;
        int min_length = 0;
        int i = 0;//滑动窗口起始位置
        for(int j = 0; j < nums.size(); ++ j)
        {
            sum += nums[j];//累加和
            while(sum >= target)
            {
                min_length = j - i + 1;//长度
                result = result < min_length ? result : min_length;//更新最短的
                sum -= nums[i++];//滑动窗口往后移动，保证在 > target的前提下 长度最小
            }
        }
        return result == INT_MAX ? 0 : result; 

        // //暴搜
        // int result = INT_MAX;
        // int sum = 0;//l ... r的累加和   
        // int min_length = 0;
        // for(int i = 0; i < nums.size(); ++ i)
        // {
        //     sum = 0;//sum要更新
        //     for(int j = i; j < nums.size(); ++ j)
        //     {
        //         sum += nums[j];
        //         //大于target就更新
        //         if(sum >= target)
        //         {
        //             min_length = j - i + 1;
        //             result = result < min_length ? result : min_length;
        //             break;
        //         }
        //     }
        // }
        // //无最小子数组时为0
        // return result == INT_MAX ? 0 : result;
    }
};