原题链接：https://leetcode-cn.com/problems/binary-search/

我的代码：
class Solution {
public:
    int search(vector<int>& nums, int target) {
        // int left = 0;
        // int right = nums.size() - 1; //左闭右闭时这里为length-1 推荐这种写法
        //二分法logN
        //1、左闭右闭
        // while(left <= right)
        // {
        //     int mid = left + ((right - left) >> 1);//右移一位除2
        //     if(nums[mid] > target)
        //     {
        //         right = mid - 1;
        //     }
        //     else if(nums[mid] < target)
        //     {
        //         left = mid + 1;
        //     }
        //     else
        //     {
        //         return mid;
        //     }
        // }


        //2、左闭右开
        int left = 0;
        int right = nums.size(); //这里为length，
        while(left < right)
        {
            int mid = left + ((right - left) >> 1);//右移一位除2
            if(nums[mid] > target)
            {
                right = mid;//这里注意为mid，初始时是length
            }
            else if(nums[mid] < target)
            {
                left = mid + 1;
            }
            else
            {
                return mid;
            }
        }

        //直接遍历  时间复杂度O（n）
        // for(int i = 0; i < nums.size(); ++ i)
        // {
        //     if(nums[i] == target)
        //         return i;
        // }

        return -1;
    }
};